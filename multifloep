#include <Adafruit_NeoPixel.h>

// Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags

Adafruit_NeoPixel strip = Adafruit_NeoPixel(360, 6, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.


int s = 1;    // master snelheid, hoger = trager
int smin = 0;  // minimale traagheid pixels, hoger = langzamer bewegende pixels
int smax = 2; // maximale traagheid pixels, hoger = langzamer bewegende pixels

int s1 = 1;
int s2 = 1;
int s3 = 1;
int s4 = 1;
int s5 = 1;
int s6 = 1;
int s7 = 1;
int s8 = 1;
int s9 = 1;
int s10 = 1;
int s11 = 1;
int s12 = 1;

int t1 = 0;
int t2 = 0;
int t3 = 0;
int t4 = 0;
int t5 = 0;
int t6 = 0;
int t7 = 0;
int t8 = 0;
int t9 = 0;
int t10 = 0;
int t11 = 0;
int t12 = 0;

int k1 = 0;
int ks1 = 30;
int r1 = 0;
int g1 = 0;
int b1 = 0;

int k2 = 0;
int ks2 = 2;
int r2 = 0;
int g2 = 0;
int b2 = 0;

int k3 = 0;
int ks3 = 2;
int r3 = 0;
int g3 = 0;
int b3 = 0;

int k4 = 0;
int ks4 = 2;
int r4 = 0;
int g4 = 0;
int b4 = 0;

int k5 = 0;
int ks5 = 2;
int r5 = 0;
int g5 = 0;
int b5 = 0;

int k6 = 0;
int ks6 = 2;
int r6 = 0;
int g6 = 0;
int b6 = 0;

int k7 = 0;
int ks7 = 2;
int r7 = 0;
int g7 = 0;
int b7 = 0;

int k8 = 0;
int ks8 = 2;
int r8 = 0;
int g8 = 0;
int b8 = 0;

int k9 = 0;
int ks9 = 2;
int r9 = 0;
int g9 = 0;
int b9 = 0;

int k10 = 0;
int ks10 = 2;
int r10 = 0;
int g10 = 0;
int b10 = 0;

int k11 = 0;
int ks11 = 2;
int r11 = 0;
int g11 = 0;
int b11 = 0;

int k12 = 0;
int ks12 = 2;
int r12 = 0;
int g12 = 0;
int b12 = 0;

int p1 = 0;
int p2 = 0;
int p3 = 0;
int p4 = 0;
int p5 = 0;
int p6 = 0;
int p7 = 0;
int p8 = 0;
int p9 = 0;
int p10 = 0;
int p11 = 0;
int p12 = 0;



void setup() {
  strip.begin();
}




void loop() {
  
  for(int u = 0; u < 361; u++) { // pixels van de vorige ronde uit
    strip.setPixelColor(u, 0);
  }
  
  
  if(k1 < 768) {  // kleuren cyclus
    k1 = k1 + ks1;
  } else {
    k1 = 0;
  }
  
  if(k1 < 256) {
    r1 = 256 - k1;
    g1 = k1;
    b1 = 0;
  } else if(k1 < 512) {
    r1 = 0;
    g1 = 512 - k1;
    b1 = k1 - 256;
  } else {
    r1 = k1 - 512;
    g1 = 0;
    b1 = 768 - k1;
  }
  
  
  if(k2 < 768) {  // kleuren cyclus
    k2 = k2 + ks2;
  } else {
    k2 = 0;
  }
  
  if(k2 < 256) {
    r2 = 256 - k2;
    g2 = k2;
    b2 = 0;
  } else if(k2 < 512) {
    r2 = 0;
    g2 = 512 - k2;
    b2 = k2 - 256;
  } else {
    r2 = k2 - 512;
    g2 = 0;
    b2 = 768 - k2;
  }
  
  
    if(k3 < 768) {  // kleuren cyclus
    k3 = k3 + ks3;
  } else {
    k3 = 0;
  }
  
  if(k3 < 256) {
    r3 = 256 - k3;
    g3 = k3;
    b3 = 0;
  } else if(k3 < 512) {
    r3 = 0;
    g3 = 512 - k3;
    b3 = k3 - 256;
  } else {
    r3 = k3 - 512;
    g3 = 0;
    b3 = 768 - k3;
  }
  
  
  if(k4 < 768) {  // kleuren cyclus
    k4 = k4 + ks4;
  } else {
    k4 = 0;
  }
  
  if(k4 < 256) {
    r4 = 256 - k4;
    g4 = k4;
    b4 = 0;
  } else if(k4 < 512) {
    r4 = 0;
    g4 = 512 - k4;
    b4 = k4 - 256;
  } else {
    r4 = k4 - 512;
    g4 = 0;
    b4 = 768 - k4;
  }
  
  if(k5 < 768) {  // kleuren cyclus
    k5 = k5 + ks5;
  } else {
    k5 = 0;
  }
  
  if(k5 < 256) {
    r5 = 256 - k5;
    g5 = k5;
    b5 = 0;
  } else if(k5 < 512) {
    r5 = 0;
    g5 = 512 - k5;
    b5 = k5 - 256;
  } else {
    r5 = k5 - 512;
    g5 = 0;
    b5 = 768 - k5;
  }
  
  
  if(k6 < 768) {  // kleuren cyclus 6
    k6 = k6 + ks6;
  } else {
    k6 = 0;
  }
  
  if(k6 < 256) {
    r6 = 256 - k6;
    g6 = k6;
    b6 = 0;
  } else if(k6 < 512) {
    r6 = 0;
    g6 = 512 - k6;
    b6 = k6 - 256;
  } else {
    r6 = k6 - 512;
    g6 = 0;
    b6 = 768 - k6;
  }

  if(k7 < 768) {  // kleuren cyclus 7
    k7 = k7 + ks7;
  } else {
    k7 = 0;
  }
  
  if(k7 < 256) {
    r7 = 256 - k7;
    g7 = k7;
    b7 = 0;
  } else if(k7 < 512) {
    r7 = 0;
    g7 = 512 - k7;
    b7 = k7 - 256;
  } else {
    r7 = k7 - 512;
    g7 = 0;
    b7 = 768 - k7;
  }

  if(k8 < 768) {  // kleuren cyclus 8
    k8 = k8 + ks8;
  } else {
    k8 = 0;
  }
  
  if(k8 < 256) {
    r8 = 256 - k8;
    g8 = k8;
    b8 = 0;
  } else if(k8 < 512) {
    r8 = 0;
    g8 = 512 - k8;
    b8 = k8 - 256;
  } else {
    r8 = k8 - 512;
    g8 = 0;
    b8 = 768 - k8;
  }

  if(k9 < 768) {  // kleuren cyclus 9
    k9 = k9 + ks9;
  } else {
    k9 = 0;
  }
  
  if(k9 < 256) {
    r9 = 256 - k9;
    g9 = k9;
    b9 = 0;
  } else if(k9 < 512) {
    r9 = 0;
    g9 = 512 - k9;
    b9 = k9 - 256;
  } else {
    r9 = k9 - 512;
    g9 = 0;
    b9 = 768 - k9;
  }

  if(k10 < 768) {  // kleuren cyclus 10
    k10 = k10 + ks10;
  } else {
    k10 = 0;
  }
  
  if(k10 < 256) {
    r10 = 256 - k10;
    g10 = k10;
    b10 = 0;
  } else if(k10 < 512) {
    r10 = 0;
    g10 = 512 - k10;
    b10 = k10 - 256;
  } else {
    r10 = k10 - 512;
    g10 = 0;
    b10 = 768 - k10;
  }

  if(k11 < 768) {  // kleuren cyclus 11
    k11 = k11 + ks11;
  } else {
    k11 = 0;
  }
  
  if(k11 < 256) {
    r11 = 256 - k11;
    g11 = k11;
    b11 = 0;
  } else if(k11 < 512) {
    r11 = 0;
    g11 = 512 - k11;
    b11 = k11 - 256;
  } else {
    r11 = k11 - 512;
    g11 = 0;
    b11 = 768 - k11;
  }

  if(k12 < 768) {  // kleuren cyclus 12
    k12 = k12 + ks12;
  } else {
    k12 = 0;
  }
  
  if(k12 < 256) {
    r12 = 256 - k12;
    g12 = k12;
    b12 = 0;
  } else if(k12 < 512) {
    r12 = 0;
    g12 = 512 - k12;
    b12 = k12 - 256;
  } else {
    r12 = k12 - 512;
    g12 = 0;
    b12 = 768 - k12;
  }




  
  if(t1 < s1) {
    t1 = t1 + 1;
  } else {
    if(p1 < 371) {
      p1 = p1 + 1;
      t1 = 0;
    } else {
      p1 = 0;
      k1 = random(768);
      s1 = random(smin, smax);
      t1 = 0;
    }
  }
  
  if(t2 < s2) {
    t2 = t2 + 1;
  } else {
    if(p2 > 0) {
      p2 = p2 - 1;
      t2 = 0;
    } else {
      p2 = 360;
      k2 = random(768);
      s2 = random(smin, smax);
      t2 = 0;
    }
  }
  
  if(t3 < s3) {
    t3 = t3 + 1;
  } else {
    if(p3 < 371) {
      p3 = p3 + 1;
      t3 = 0;
    } else {
      p3 = 0;
      k3 = random(768);
      s3 = random(smin, smax);
      t3 = 0;
    }
  }
  
  if(t4 < s4) {
    t4 = t4 + 1;
  } else {
    if(p4 > 0) {
      p4 = p4 - 1;
      t4 = 0;
    } else {
      p4 = 360;
      k4 = random(768);
      s4 = random(smin, smax);
      t4 = 0;
    }
  }
  
  
  if(t5 < s5) {
    t5 = t5 + 1;
  } else {
    if(p5 < 371) {
      p5 = p5 + 1;
      t5 = 0;
    } else {
      p5 = 0;
      k5 = random(768);
      s5 = random(smin, smax);
      t5 = 0;
    }
  }
  
  if(t6 < s6) {
    t6 = t6 + 1;
  } else {
    if(p6 > 0) {
      p6 = p6 - 1;
      t6 = 0;
    } else {
      p6 = 360;
      k6 = random(768);
      s6 = random(smin, smax);
      t6 = 0;
    }
  }

  if(t7 < s7) {
    t7 = t7 + 1;
  } else {
    if(p7 < 371) {
      p7 = p7 + 1;
      t7 = 0;
    } else {
      p7 = 0;
      k7 = random(768);
      s7 = random(smin, smax);
      t7 = 0;
    }
  }
  
  if(t8 < s8) {
    t8 = t8 + 1;
  } else {
    if(p8 > 0) {
      p8 = p8 - 1;
      t8 = 0;
    } else {
      p8 = 360;
      k8 = random(768);
      s8 = random(smin, smax);
      t8 = 0;
    }
  }
  

  if(t9 < s9) {
    t9 = t9 + 1;
  } else {
    if(p9 < 371) {
      p9 = p9 + 1;
      t9 = 0;
    } else {
      p9 = 0;
      k9 = random(768);
      s9 = random(smin, smax);
      t9 = 0;
    }
  }
  
  if(t10 < s10) {
    t10 = t10 + 1;
  } else {
    if(p10 > 0) {
      p10 = p10 - 1;
      t10 = 0;
    } else {
      p10 = 360;
      k10 = random(768);
      s10 = random(smin, smax);
      t10 = 0;
    }
  }
  

  if(t11 < s11) {
    t11 = t11 + 1;
  } else {
    if(p11 < 371) {
      p11 = p11 + 1;
      t11 = 0;
    } else {
      p11 = 0;
      k11 = random(768);
      s11 = random(smin, smax);
      t11 = 0;
    }
  }
  
  if(t12 < s12) {
    t12 = t12 + 1;
  } else {
    if(p12 > 0) {
      p12 = p12 - 1;
      t12 = 0;
    } else {
      p12 = 360;
      k12 = random(768);
      s12 = random(smin, smax);
      t12 = 0;
    }
  }
  
  
  


  strip.setPixelColor(p1-9, strip.Color(r1 * 0.1, g1 * 0.1, b1 * 0.1));
  strip.setPixelColor(p2+9, strip.Color(r2 * 0.1, g2 * 0.1, b2 * 0.1));
  strip.setPixelColor(p3-9, strip.Color(r3 * 0.1, g3 * 0.1, b3 * 0.1));
  strip.setPixelColor(p4+9, strip.Color(r4 * 0.1, g4 * 0.1, b4 * 0.1));
  strip.setPixelColor(p5-9, strip.Color(r5 * 0.1, g5 * 0.1, b5 * 0.1));
  strip.setPixelColor(p6+9, strip.Color(r6 * 0.1, g6 * 0.1, b6 * 0.1));
  strip.setPixelColor(p7-9, strip.Color(r7 * 0.1, g7 * 0.1, b7 * 0.1));
  strip.setPixelColor(p8+9, strip.Color(r8 * 0.1, g8 * 0.1, b8 * 0.1));
  strip.setPixelColor(p9-9, strip.Color(r9 * 0.1, g9 * 0.1, b9 * 0.1));
  strip.setPixelColor(p10+9, strip.Color(r10 * 0.1, g10 * 0.1, b10 * 0.1));
  strip.setPixelColor(p11-9, strip.Color(r11 * 0.1, g11 * 0.1, b11 * 0.1));
  strip.setPixelColor(p12+9, strip.Color(r12 * 0.1, g12 * 0.1, b12 * 0.1));

  strip.setPixelColor(p1-8, strip.Color(r1 * 0.2, g1 * 0.2, b1 * 0.2));
  strip.setPixelColor(p2+8, strip.Color(r2 * 0.2, g2 * 0.2, b2 * 0.2));
  strip.setPixelColor(p3-8, strip.Color(r3 * 0.2, g3 * 0.2, b3 * 0.2));
  strip.setPixelColor(p4+8, strip.Color(r4 * 0.2, g4 * 0.2, b4 * 0.2));
  strip.setPixelColor(p5-8, strip.Color(r5 * 0.2, g5 * 0.2, b5 * 0.2));
  strip.setPixelColor(p6+8, strip.Color(r6 * 0.2, g6 * 0.2, b6 * 0.2));
  strip.setPixelColor(p7-8, strip.Color(r7 * 0.2, g7 * 0.2, b7 * 0.2));
  strip.setPixelColor(p8+8, strip.Color(r8 * 0.2, g8 * 0.2, b8 * 0.2));
  strip.setPixelColor(p9-8, strip.Color(r9 * 0.2, g9 * 0.2, b9 * 0.2));
  strip.setPixelColor(p10+8, strip.Color(r10 * 0.2, g10 * 0.2, b10 * 0.2));
  strip.setPixelColor(p11-8, strip.Color(r11 * 0.2, g11 * 0.2, b11 * 0.2));
  strip.setPixelColor(p12+8, strip.Color(r12 * 0.2, g12 * 0.2, b12 * 0.2));

  strip.setPixelColor(p1-7, strip.Color(r1 * 0.3, g1 * 0.3, b1 * 0.3));
  strip.setPixelColor(p2+7, strip.Color(r2 * 0.3, g2 * 0.3, b2 * 0.3));
  strip.setPixelColor(p3-7, strip.Color(r3 * 0.3, g3 * 0.3, b3 * 0.3));
  strip.setPixelColor(p4+7, strip.Color(r4 * 0.3, g4 * 0.3, b4 * 0.3));
  strip.setPixelColor(p5-7, strip.Color(r5 * 0.3, g5 * 0.3, b5 * 0.3));
  strip.setPixelColor(p6+7, strip.Color(r6 * 0.3, g6 * 0.3, b6 * 0.3));
  strip.setPixelColor(p7-7, strip.Color(r7 * 0.3, g7 * 0.3, b7 * 0.3));
  strip.setPixelColor(p8+7, strip.Color(r8 * 0.3, g8 * 0.3, b8 * 0.3));
  strip.setPixelColor(p9-7, strip.Color(r9 * 0.3, g9 * 0.3, b9 * 0.3));
  strip.setPixelColor(p10+7, strip.Color(r10 * 0.3, g10 * 0.3, b10 * 0.3));
  strip.setPixelColor(p11-7, strip.Color(r11 * 0.3, g11 * 0.3, b11 * 0.3));
  strip.setPixelColor(p12+7, strip.Color(r12 * 0.3, g12 * 0.3, b12 * 0.3));

  strip.setPixelColor(p1-6, strip.Color(r1 * 0.4, g1 * 0.4, b1 * 0.4));
  strip.setPixelColor(p2+6, strip.Color(r2 * 0.4, g2 * 0.4, b2 * 0.4));
  strip.setPixelColor(p3-6, strip.Color(r3 * 0.4, g3 * 0.4, b3 * 0.4));
  strip.setPixelColor(p4+6, strip.Color(r4 * 0.4, g4 * 0.4, b4 * 0.4));
  strip.setPixelColor(p5-6, strip.Color(r5 * 0.4, g5 * 0.4, b5 * 0.4));
  strip.setPixelColor(p6+6, strip.Color(r6 * 0.4, g6 * 0.4, b6 * 0.4));
  strip.setPixelColor(p7-6, strip.Color(r7 * 0.4, g7 * 0.4, b7 * 0.4));
  strip.setPixelColor(p8+6, strip.Color(r8 * 0.4, g8 * 0.4, b8 * 0.4));
  strip.setPixelColor(p9-6, strip.Color(r9 * 0.4, g9 * 0.4, b9 * 0.4));
  strip.setPixelColor(p10+6, strip.Color(r10 * 0.4, g10 * 0.4, b10 * 0.4));
  strip.setPixelColor(p11-6, strip.Color(r11 * 0.4, g11 * 0.4, b11 * 0.4));
  strip.setPixelColor(p12+6, strip.Color(r12 * 0.4, g12 * 0.4, b12 * 0.4));

  strip.setPixelColor(p1-5, strip.Color(r1 * 0.5, g1 * 0.5, b1 * 0.5));
  strip.setPixelColor(p2+5, strip.Color(r2 * 0.5, g2 * 0.5, b2 * 0.5));
  strip.setPixelColor(p3-5, strip.Color(r3 * 0.5, g3 * 0.5, b3 * 0.5));
  strip.setPixelColor(p4+5, strip.Color(r4 * 0.5, g4 * 0.5, b4 * 0.5));
  strip.setPixelColor(p5-5, strip.Color(r5 * 0.5, g5 * 0.5, b5 * 0.5));
  strip.setPixelColor(p6+5, strip.Color(r6 * 0.5, g6 * 0.5, b6 * 0.5));
  strip.setPixelColor(p7-5, strip.Color(r7 * 0.5, g7 * 0.5, b7 * 0.5));
  strip.setPixelColor(p8+5, strip.Color(r8 * 0.5, g8 * 0.5, b8 * 0.5));
  strip.setPixelColor(p9-5, strip.Color(r9 * 0.5, g9 * 0.5, b9 * 0.5));
  strip.setPixelColor(p10+5, strip.Color(r10 * 0.5, g10 * 0.5, b10 * 0.5));
  strip.setPixelColor(p11-5, strip.Color(r11 * 0.5, g11 * 0.5, b11 * 0.5));
  strip.setPixelColor(p12+5, strip.Color(r12 * 0.5, g12 * 0.5, b12 * 0.5));

  strip.setPixelColor(p1-4, strip.Color(r1 * 0.6, g1 * 0.6, b1 * 0.6));
  strip.setPixelColor(p2+4, strip.Color(r2 * 0.6, g2 * 0.6, b2 * 0.6));
  strip.setPixelColor(p3-4, strip.Color(r3 * 0.6, g3 * 0.6, b3 * 0.6));
  strip.setPixelColor(p4+4, strip.Color(r4 * 0.6, g4 * 0.6, b4 * 0.6));
  strip.setPixelColor(p5-4, strip.Color(r5 * 0.6, g5 * 0.6, b5 * 0.6));
  strip.setPixelColor(p6+4, strip.Color(r6 * 0.6, g6 * 0.6, b6 * 0.6));
  strip.setPixelColor(p7-4, strip.Color(r7 * 0.6, g7 * 0.6, b7 * 0.6));
  strip.setPixelColor(p8+4, strip.Color(r8 * 0.6, g8 * 0.6, b8 * 0.6));
  strip.setPixelColor(p9-4, strip.Color(r9 * 0.6, g9 * 0.6, b9 * 0.6));
  strip.setPixelColor(p10+4, strip.Color(r10 * 0.6, g10 * 0.6, b10 * 0.6));
  strip.setPixelColor(p11-4, strip.Color(r11 * 0.6, g11 * 0.6, b11 * 0.6));
  strip.setPixelColor(p12+4, strip.Color(r12 * 0.6, g12 * 0.6, b12 * 0.6));

  strip.setPixelColor(p1-3, strip.Color(r1 * 0.7, g1 * 0.7, b1 * 0.7));
  strip.setPixelColor(p2+3, strip.Color(r2 * 0.7, g2 * 0.7, b2 * 0.7));
  strip.setPixelColor(p3-3, strip.Color(r3 * 0.7, g3 * 0.7, b3 * 0.7));
  strip.setPixelColor(p4+3, strip.Color(r4 * 0.7, g4 * 0.7, b4 * 0.7));
  strip.setPixelColor(p5-3, strip.Color(r5 * 0.7, g5 * 0.7, b5 * 0.7));
  strip.setPixelColor(p6+3, strip.Color(r6 * 0.7, g6 * 0.7, b6 * 0.7));
  strip.setPixelColor(p7-3, strip.Color(r7 * 0.7, g7 * 0.7, b7 * 0.7));
  strip.setPixelColor(p8+3, strip.Color(r8 * 0.7, g8 * 0.7, b8 * 0.7));
  strip.setPixelColor(p9-3, strip.Color(r9 * 0.7, g9 * 0.7, b9 * 0.7));
  strip.setPixelColor(p10+3, strip.Color(r10 * 0.7, g10 * 0.7, b10 * 0.7));
  strip.setPixelColor(p11-3, strip.Color(r11 * 0.7, g11 * 0.7, b11 * 0.7));
  strip.setPixelColor(p12+3, strip.Color(r12 * 0.7, g12 * 0.7, b12 * 0.7));

  strip.setPixelColor(p1-2, strip.Color(r1 * 0.8, g1 * 0.8, b1 * 0.8));
  strip.setPixelColor(p2+2, strip.Color(r2 * 0.8, g2 * 0.8, b2 * 0.8));
  strip.setPixelColor(p3-2, strip.Color(r3 * 0.8, g3 * 0.8, b3 * 0.8));
  strip.setPixelColor(p4+2, strip.Color(r4 * 0.8, g4 * 0.8, b4 * 0.8));
  strip.setPixelColor(p5-2, strip.Color(r5 * 0.8, g5 * 0.8, b5 * 0.8));
  strip.setPixelColor(p6+2, strip.Color(r6 * 0.8, g6 * 0.8, b6 * 0.8));
  strip.setPixelColor(p7-2, strip.Color(r7 * 0.8, g7 * 0.8, b7 * 0.8));
  strip.setPixelColor(p8+2, strip.Color(r8 * 0.8, g8 * 0.8, b8 * 0.8));
  strip.setPixelColor(p9-2, strip.Color(r9 * 0.8, g9 * 0.8, b9 * 0.8));
  strip.setPixelColor(p10+2, strip.Color(r10 * 0.8, g10 * 0.8, b10 * 0.8));
  strip.setPixelColor(p11-2, strip.Color(r11 * 0.8, g11 * 0.8, b11 * 0.8));
  strip.setPixelColor(p12+2, strip.Color(r12 * 0.8, g12 * 0.8, b12 * 0.8));
  
  strip.setPixelColor(p1-1, strip.Color(r1 * 0.9, g1 * 0.9, b1 * 0.9));
  strip.setPixelColor(p2+1, strip.Color(r2 * 0.9, g2 * 0.9, b2 * 0.9));
  strip.setPixelColor(p3-1, strip.Color(r3 * 0.9, g3 * 0.9, b3 * 0.9));
  strip.setPixelColor(p4+1, strip.Color(r4 * 0.9, g4 * 0.9, b4 * 0.9));
  strip.setPixelColor(p5-1, strip.Color(r5 * 0.9, g5 * 0.9, b5 * 0.9));
  strip.setPixelColor(p6+1, strip.Color(r6 * 0.9, g6 * 0.9, b6 * 0.9));
  strip.setPixelColor(p7-1, strip.Color(r7 * 0.9, g7 * 0.9, b7 * 0.9));
  strip.setPixelColor(p8+1, strip.Color(r8 * 0.9, g8 * 0.9, b8 * 0.9));
  strip.setPixelColor(p9-1, strip.Color(r9 * 0.9, g9 * 0.9, b9 * 0.9));
  strip.setPixelColor(p10+1, strip.Color(r10 * 0.9, g10 * 0.9, b10 * 0.9));
  strip.setPixelColor(p11-1, strip.Color(r11 * 0.9, g11 * 0.9, b11 * 0.9));
  strip.setPixelColor(p12+1, strip.Color(r12 * 0.9, g12 * 0.9, b12 * 0.9));
  
  strip.setPixelColor(p1, strip.Color(r1, g1, b1));
  strip.setPixelColor(p2, strip.Color(r2, g2, b2));
  strip.setPixelColor(p3, strip.Color(r3, g3, b3));
  strip.setPixelColor(p4, strip.Color(r4, g4, b4));
  strip.setPixelColor(p5, strip.Color(r5, g5, b5));
  strip.setPixelColor(p6, strip.Color(r6, g6, b6));
  strip.setPixelColor(p7, strip.Color(r7, g7, b7));
  strip.setPixelColor(p8, strip.Color(r8, g8, b8));
  strip.setPixelColor(p9, strip.Color(r9, g9, b9));
  strip.setPixelColor(p10, strip.Color(r10, g10, b10));
  strip.setPixelColor(p11, strip.Color(r11, g11, b11));
  strip.setPixelColor(p12, strip.Color(r12, g12, b12));
  

  
  strip.show();
  delay(s);
}
